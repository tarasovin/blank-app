import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤",
    page_icon="üè•",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def generate_test_data(n_patients=100):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞.
    """
    np.random.seed(42)
    
    patient_ids = [f'P{i:04d}' for i in range(1, n_patients + 1)]
    ages = np.random.randint(18, 91, size=n_patients)
    genders = np.random.choice(['–ú', '–ñ'], size=n_patients)
    departments = np.random.choice(['–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è', '–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è', '–•–∏—Ä—É—Ä–≥–∏—è', '–¢–µ—Ä–∞–ø–∏—è', '–†–µ–∞–Ω–∏–º–∞—Ü–∏—è'], 
                                  size=n_patients)
    
    today = datetime.now()
    admission_dates = [today - timedelta(days=np.random.randint(1, 31)) for _ in range(n_patients)]
    
    statuses = np.random.choice(['–°—Ç–∞–±–∏–ª—å–Ω—ã–π', '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'], 
                               size=n_patients, p=[0.7, 0.2, 0.1])
    
    heart_rates = np.random.normal(75, 15, size=n_patients).astype(int)
    blood_pressures_sys = np.random.normal(120, 20, size=n_patients).astype(int)
    blood_pressures_dia = np.random.normal(80, 10, size=n_patients).astype(int)
    temperatures = np.random.normal(36.6, 0.8, size=n_patients).round(1)
    oxygen_levels = np.random.normal(97, 3, size=n_patients).astype(int)
    
    for i in range(n_patients):
        if statuses[i] == '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π':
            heart_rates[i] = np.random.randint(100, 140)
            blood_pressures_sys[i] = np.random.randint(90, 110) if np.random.random() < 0.5 else np.random.randint(160, 200)
            blood_pressures_dia[i] = np.random.randint(50, 70) if np.random.random() < 0.5 else np.random.randint(100, 120)
            temperatures[i] = round(np.random.uniform(38.0, 40.0), 1)
            oxygen_levels[i] = np.random.randint(80, 92)
        elif statuses[i] == '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è':
            heart_rates[i] = np.random.randint(90, 110)
            blood_pressures_sys[i] = np.random.randint(110, 150)
            blood_pressures_dia[i] = np.random.randint(70, 95)
            temperatures[i] = round(np.random.uniform(37.0, 38.0), 1)
            oxygen_levels[i] = np.random.randint(92, 96)
    
    df = pd.DataFrame({
        'ID –ø–∞—Ü–∏–µ–Ω—Ç–∞': patient_ids,
        '–í–æ–∑—Ä–∞—Å—Ç': ages,
        '–ü–æ–ª': genders,
        '–û—Ç–¥–µ–ª–µ–Ω–∏–µ': departments,
        '–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è': admission_dates,
        '–°—Ç–∞—Ç—É—Å': statuses,
        '–ß–°–°': heart_rates,
        '–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î': blood_pressures_sys,
        '–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î': blood_pressures_dia,
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': temperatures,
        '–£—Ä–æ–≤–µ–Ω—å –∫–∏—Å–ª–æ—Ä–æ–¥–∞': oxygen_levels,
    })
    
    df['–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ'] = df['–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î'].astype(str) + '/' + df['–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î'].astype(str)
    df['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è (–¥–Ω–∏)'] = [(today - date).days for date in df['–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è']]
    df['–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è'] = df['–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è'].dt.strftime('%d.%m.%Y')
    
    return df

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
df = generate_test_data(100)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
st.title('üè• –î–∞—à–±–æ—Ä–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤')

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.header('–§–∏–ª—å—Ç—Ä—ã')

# –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—é
selected_departments = st.sidebar.multiselect(
    '–û—Ç–¥–µ–ª–µ–Ω–∏–µ:',
    options=sorted(df['–û—Ç–¥–µ–ª–µ–Ω–∏–µ'].unique()),
    default=[]
)

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
selected_statuses = st.sidebar.multiselect(
    '–°—Ç–∞—Ç—É—Å:',
    options=sorted(df['–°—Ç–∞—Ç—É—Å'].unique()),
    default=[]
)

# –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
age_range = st.sidebar.slider(
    '–í–æ–∑—Ä–∞—Å—Ç:',
    min_value=int(df['–í–æ–∑—Ä–∞—Å—Ç'].min()),
    max_value=int(df['–í–æ–∑—Ä–∞—Å—Ç'].max()),
    value=(int(df['–í–æ–∑—Ä–∞—Å—Ç'].min()), int(df['–í–æ–∑—Ä–∞—Å—Ç'].max()))
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered_df = df.copy()

if selected_departments:
    filtered_df = filtered_df[filtered_df['–û—Ç–¥–µ–ª–µ–Ω–∏–µ'].isin(selected_departments)]
if selected_statuses:
    filtered_df = filtered_df[filtered_df['–°—Ç–∞—Ç—É—Å'].isin(selected_statuses)]
filtered_df = filtered_df[
    (filtered_df['–í–æ–∑—Ä–∞—Å—Ç'] >= age_range[0]) & 
    (filtered_df['–í–æ–∑—Ä–∞—Å—Ç'] <= age_range[1])
]

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
col1, col2, col3, col4, col5, col6 = st.columns(6)

with col1:
    st.metric("–í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", len(filtered_df))
with col2:
    critical = len(filtered_df[filtered_df['–°—Ç–∞—Ç—É—Å'] == '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'])
    st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö", critical, delta_color="inverse")
with col3:
    attention = len(filtered_df[filtered_df['–°—Ç–∞—Ç—É—Å'] == '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'])
    st.metric("–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è", attention, delta_color="inverse")
with col4:
    stable = len(filtered_df[filtered_df['–°—Ç–∞—Ç—É—Å'] == '–°—Ç–∞–±–∏–ª—å–Ω—ã–π'])
    st.metric("–°—Ç–∞–±–∏–ª—å–Ω—ã—Ö", stable)
with col5:
    avg_age = filtered_df['–í–æ–∑—Ä–∞—Å—Ç'].mean()
    st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç", f"{avg_age:.1f}")
with col6:
    avg_stay = filtered_df['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è (–¥–Ω–∏)'].mean()
    st.metric("–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ", f"{avg_stay:.1f} –¥–Ω–µ–π")

# –ì—Ä–∞—Ñ–∏–∫–∏
col1, col2 = st.columns(2)

with col1:
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É")
    status_counts = filtered_df['–°—Ç–∞—Ç—É—Å'].value_counts()
    fig_status = px.pie(
        values=status_counts.values,
        names=status_counts.index,
        color=status_counts.index,
        color_discrete_map={
            '–°—Ç–∞–±–∏–ª—å–Ω—ã–π': 'green',
            '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è': 'orange',
            '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π': 'red'
        },
        hole=0.4
    )
    st.plotly_chart(fig_status)

with col2:
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º")
    dept_counts = filtered_df['–û—Ç–¥–µ–ª–µ–Ω–∏–µ'].value_counts()
    fig_dept = px.bar(
        x=dept_counts.index,
        y=dept_counts.values,
        color=dept_counts.index,
        labels={'x': '–û—Ç–¥–µ–ª–µ–Ω–∏–µ', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤'}
    )
    st.plotly_chart(fig_dept)

# –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
st.subheader("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
vital_sign = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:",
    ['–ß–°–°', '–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î', '–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–£—Ä–æ–≤–µ–Ω—å –∫–∏—Å–ª–æ—Ä–æ–¥–∞']
)

fig_vital = px.box(
    filtered_df,
    x='–°—Ç–∞—Ç—É—Å',
    y=vital_sign,
    color='–°—Ç–∞—Ç—É—Å',
    color_discrete_map={
        '–°—Ç–∞–±–∏–ª—å–Ω—ã–π': 'green',
        '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è': 'orange',
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π': 'red'
    },
    points='all'
)
st.plotly_chart(fig_vital)

# –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
st.subheader("–°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
st.dataframe(
    filtered_df,
    column_config={
        "–°—Ç–∞—Ç—É—Å": st.column_config.SelectboxColumn(
            "–°—Ç–∞—Ç—É—Å",
            help="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            width="medium",
            options=["–°—Ç–∞–±–∏–ª—å–Ω—ã–π", "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"]
        )
    },
    hide_index=True
) 